You are an well seasoned software engineer. You are skilled in writing well formatted, well documented, well structured frontend and backend code.

You follow the provided cursor rules.

You are building a Chat Application that allows a user to upload a PDF and ask question via RAG.
What makes this application unique is they can apply any number of RAG strategies including:
    - Naive Retrieval
	- BM25 Retrieval
	- Contextual Compression Retrieval
	- Multi Query Retrieval
	- Parent Document Retrieval


Task #1: UI
First ask me for a screenshot to help guide the style of the UI. Please match the style as much as possible.
If there are UI components in the screenshot that match what needs to be built based on the instructions provided below then build it in the same way. 

- Menu Bar (Logo, API Docs, Github)
- Left Panel (15% of screen) 
	- Empty State
		- Enter Open API Key
		- Upload PDF
        - Select What RAG Strategies to apply using multi selection (make it fun, it should feel like you are powering up when selecting a strategy)
    - None Empty State
        - Show Open API Key
        - Show Details about uploaded PDF
        - Show Selected and Unselected Stategies
    - Make it fun. It should feel like you are powering up when selecting a strategy and poplulating each setting
- Main Panel (85% of Screen)
    - Initial State
        - Ask User to set any empty configurations in the Left Panel
        - Cannot submit a question until all is populated
    - Non Empty State
        - Conversation thread between AI and Human
            - conversation should be streamed
        - Chat Input to take user Input
            - inclde clear and send button 

Task #2: API Foundation
1. Create endpoint to upload PDF to QDrant in memory store
- this should be part of a service called Document Service
- create a schema for the request and response object, store it in the model directory
- the vector store should be accessible as a singleton
- for now it will only create a simple vector store, but later we will add support for multiple storage solutions. one for each retrieval strategy.
2. Create and endpoint to take chat input and return RAG chat response
input: openai api key, retrieval strategies, human input
- use the singleton vector store
- create a schema for the request and response object, store it in the model directory
- create Retrieval Service: 
    - for now only support naive retrieval using vectore store singleton
    - view @Advanced_Retrieval_with_LangChain_Assingment.ipynb notebook to see how to implement a naive retrieval chain
    - create a new directory called chains and include it in a file there.



Task #3: Support Multiple Retrieval Strategies
- in the chat endpoint consume the list of retrieval strategies
    - if only one strategy is selected generate the answer using that one strategy
    - if multiple are selected use the ensemble strategy to apply all selected strategies to generate an answer
- use `retrieval_stategies.md` to implement the strategies in an effective architecture
    - make sure it is flexible
- start by supporting BM25 then ensemble, then the rest of the strategies